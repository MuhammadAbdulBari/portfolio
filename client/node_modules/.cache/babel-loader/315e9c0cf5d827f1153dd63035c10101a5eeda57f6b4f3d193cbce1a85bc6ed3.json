{"ast":null,"code":"var _jsxFileName = \"E:\\\\wamp\\\\www\\\\portfolio\\\\client\\\\src\\\\components\\\\TypingAnimation.jsx\",\n  _s = $RefreshSig$();\n// components/TypingAnimation.jsx\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingAnimation = ({\n  strings,\n  typeSpeed = 50,\n  backSpeed = 30,\n  backDelay = 2000,\n  loop = true,\n  className = \"\"\n}) => {\n  _s();\n  const el = useRef(null);\n  useEffect(() => {\n    let currentStringIndex = 0;\n    let currentCharIndex = 0;\n    let isDeleting = false;\n    let typingTimeout;\n    const type = () => {\n      const currentString = strings[currentStringIndex];\n      if (isDeleting) {\n        // Remove characters\n        el.current.textContent = currentString.substring(0, currentCharIndex - 1);\n        currentCharIndex--;\n      } else {\n        // Add characters\n        el.current.textContent = currentString.substring(0, currentCharIndex + 1);\n        currentCharIndex++;\n      }\n\n      // Determine timeout speed\n      let timeoutSpeed = isDeleting ? backSpeed : typeSpeed;\n\n      // If word is complete\n      if (!isDeleting && currentCharIndex === currentString.length) {\n        timeoutSpeed = backDelay;\n        isDeleting = true;\n      } else if (isDeleting && currentCharIndex === 0) {\n        isDeleting = false;\n        currentStringIndex = (currentStringIndex + 1) % strings.length;\n        timeoutSpeed = 500;\n      }\n      typingTimeout = setTimeout(type, timeoutSpeed);\n    };\n    typingTimeout = setTimeout(type, typeSpeed);\n    return () => {\n      clearTimeout(typingTimeout);\n    };\n  }, [strings, typeSpeed, backSpeed, backDelay, loop]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    ref: el,\n    className: className\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n_s(TypingAnimation, \"bH7R4hqe0oCFqrqYinS8ShQEwjI=\");\n_c = TypingAnimation;\nexport default TypingAnimation;\nvar _c;\n$RefreshReg$(_c, \"TypingAnimation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","TypingAnimation","strings","typeSpeed","backSpeed","backDelay","loop","className","_s","el","currentStringIndex","currentCharIndex","isDeleting","typingTimeout","type","currentString","current","textContent","substring","timeoutSpeed","length","setTimeout","clearTimeout","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/wamp/www/portfolio/client/src/components/TypingAnimation.jsx"],"sourcesContent":["// components/TypingAnimation.jsx\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\nconst TypingAnimation = ({ \r\n  strings, \r\n  typeSpeed = 50, \r\n  backSpeed = 30, \r\n  backDelay = 2000, \r\n  loop = true,\r\n  className = \"\" \r\n}) => {\r\n  const el = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    let currentStringIndex = 0;\r\n    let currentCharIndex = 0;\r\n    let isDeleting = false;\r\n    let typingTimeout;\r\n    \r\n    const type = () => {\r\n      const currentString = strings[currentStringIndex];\r\n      \r\n      if (isDeleting) {\r\n        // Remove characters\r\n        el.current.textContent = currentString.substring(0, currentCharIndex - 1);\r\n        currentCharIndex--;\r\n      } else {\r\n        // Add characters\r\n        el.current.textContent = currentString.substring(0, currentCharIndex + 1);\r\n        currentCharIndex++;\r\n      }\r\n      \r\n      // Determine timeout speed\r\n      let timeoutSpeed = isDeleting ? backSpeed : typeSpeed;\r\n      \r\n      // If word is complete\r\n      if (!isDeleting && currentCharIndex === currentString.length) {\r\n        timeoutSpeed = backDelay;\r\n        isDeleting = true;\r\n      } else if (isDeleting && currentCharIndex === 0) {\r\n        isDeleting = false;\r\n        currentStringIndex = (currentStringIndex + 1) % strings.length;\r\n        timeoutSpeed = 500;\r\n      }\r\n      \r\n      typingTimeout = setTimeout(type, timeoutSpeed);\r\n    };\r\n    \r\n    typingTimeout = setTimeout(type, typeSpeed);\r\n    \r\n    return () => {\r\n      clearTimeout(typingTimeout);\r\n    };\r\n  }, [strings, typeSpeed, backSpeed, backDelay, loop]);\r\n  \r\n  return <span ref={el} className={className} />;\r\n};\r\n\r\nexport default TypingAnimation;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,eAAe,GAAGA,CAAC;EACvBC,OAAO;EACPC,SAAS,GAAG,EAAE;EACdC,SAAS,GAAG,EAAE;EACdC,SAAS,GAAG,IAAI;EAChBC,IAAI,GAAG,IAAI;EACXC,SAAS,GAAG;AACd,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,EAAE,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,IAAIa,kBAAkB,GAAG,CAAC;IAC1B,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIC,aAAa;IAEjB,MAAMC,IAAI,GAAGA,CAAA,KAAM;MACjB,MAAMC,aAAa,GAAGb,OAAO,CAACQ,kBAAkB,CAAC;MAEjD,IAAIE,UAAU,EAAE;QACd;QACAH,EAAE,CAACO,OAAO,CAACC,WAAW,GAAGF,aAAa,CAACG,SAAS,CAAC,CAAC,EAAEP,gBAAgB,GAAG,CAAC,CAAC;QACzEA,gBAAgB,EAAE;MACpB,CAAC,MAAM;QACL;QACAF,EAAE,CAACO,OAAO,CAACC,WAAW,GAAGF,aAAa,CAACG,SAAS,CAAC,CAAC,EAAEP,gBAAgB,GAAG,CAAC,CAAC;QACzEA,gBAAgB,EAAE;MACpB;;MAEA;MACA,IAAIQ,YAAY,GAAGP,UAAU,GAAGR,SAAS,GAAGD,SAAS;;MAErD;MACA,IAAI,CAACS,UAAU,IAAID,gBAAgB,KAAKI,aAAa,CAACK,MAAM,EAAE;QAC5DD,YAAY,GAAGd,SAAS;QACxBO,UAAU,GAAG,IAAI;MACnB,CAAC,MAAM,IAAIA,UAAU,IAAID,gBAAgB,KAAK,CAAC,EAAE;QAC/CC,UAAU,GAAG,KAAK;QAClBF,kBAAkB,GAAG,CAACA,kBAAkB,GAAG,CAAC,IAAIR,OAAO,CAACkB,MAAM;QAC9DD,YAAY,GAAG,GAAG;MACpB;MAEAN,aAAa,GAAGQ,UAAU,CAACP,IAAI,EAAEK,YAAY,CAAC;IAChD,CAAC;IAEDN,aAAa,GAAGQ,UAAU,CAACP,IAAI,EAAEX,SAAS,CAAC;IAE3C,OAAO,MAAM;MACXmB,YAAY,CAACT,aAAa,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,CAACX,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,IAAI,CAAC,CAAC;EAEpD,oBAAON,OAAA;IAAMuB,GAAG,EAAEd,EAAG;IAACF,SAAS,EAAEA;EAAU;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChD,CAAC;AAACnB,EAAA,CArDIP,eAAe;AAAA2B,EAAA,GAAf3B,eAAe;AAuDrB,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}