{"ast":null,"code":"// server/server.js\nconst express = require('express');\nconst cors = require('cors');\nconst nodemailer = require('nodemailer');\nconst path = require('path');\nrequire('dotenv').config();\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(express.static(path.join(__dirname, '../build')));\n\n// Log environment variables (but don't expose password)\nconsole.log('Environment check:');\nconsole.log('EMAIL_USER:', process.env.EMAIL_USER ? 'Set' : 'Not set');\nconsole.log('EMAIL_PASS:', process.env.EMAIL_PASS ? 'Set' : 'Not set');\nconsole.log('PORT:', PORT);\n\n// Create transporter\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS\n  }\n});\n\n// Verify transporter with detailed error info\ntransporter.verify(function (error, success) {\n  if (error) {\n    console.log('‚ùå Transporter configuration error:', error);\n    console.log('Troubleshooting tips:');\n    console.log('1. Check if EMAIL_USER and EMAIL_PASS are set in .env file');\n    console.log('2. Make sure you\\'re using an App Password, not your regular Gmail password');\n    console.log('3. Ensure 2-factor authentication is enabled on your Gmail account');\n    console.log('4. Check if \"Less secure app access\" is enabled if using regular password');\n  } else {\n    console.log('‚úÖ Server is ready to take messages');\n    console.log(`üìß Using email: ${process.env.EMAIL_USER}`);\n  }\n});\n\n// Contact route with enhanced error handling\napp.post('/api/contact/send', async (req, res) => {\n  try {\n    console.log('üì® Received contact form submission:', req.body);\n    const {\n      name,\n      email,\n      message\n    } = req.body;\n\n    // Validate input\n    if (!name || !email || !message) {\n      console.log('‚ùå Validation failed: Missing fields');\n      return res.status(400).json({\n        message: 'All fields are required'\n      });\n    }\n\n    // Email options\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      // Use your email as sender\n      replyTo: email,\n      // Set reply-to as user's email\n      to: 'nizamabdulbari13@gmail.com',\n      subject: `New message from ${name} - Portfolio Contact Form`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333;\">New Contact Form Submission</h2>\n          <div style=\"background-color: #f9f9f9; padding: 20px; border-radius: 5px;\">\n            <p><strong>Name:</strong> ${name}</p>\n            <p><strong>Email:</strong> ${email}</p>\n            <p><strong>Message:</strong></p>\n            <p style=\"background-color: #fff; padding: 15px; border-left: 4px solid #4F46E5; border-radius: 3px;\">\n              ${message.replace(/\\n/g, '<br>')}\n            </p>\n          </div>\n          <p style=\"color: #666; font-size: 12px; margin-top: 20px;\">\n            This message was sent from your portfolio contact form.\n          </p>\n        </div>\n      `\n    };\n    console.log('üì§ Attempting to send email...');\n\n    // Send email\n    const info = await transporter.sendMail(mailOptions);\n    console.log('‚úÖ Email sent successfully:', info.messageId);\n    res.status(200).json({\n      message: 'Email sent successfully'\n    });\n  } catch (error) {\n    console.error('‚ùå Error sending email:', error);\n\n    // More specific error messages\n    let errorMessage = 'Failed to send email';\n    if (error.code === 'EAUTH') {\n      errorMessage = 'Authentication failed. Check email credentials.';\n    } else if (error.code === 'EENVELOPE') {\n      errorMessage = 'Invalid email address.';\n    }\n    res.status(500).json({\n      message: errorMessage\n    });\n  }\n});\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    message: 'Server is running',\n    emailConfigured: !!process.env.EMAIL_USER\n  });\n});\n\n// Test email endpoint\napp.post('/api/test-email', async (req, res) => {\n  try {\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      to: 'nizamabdulbari13@gmail.com',\n      subject: 'Test Email from Portfolio Server',\n      text: 'This is a test email to verify the server email configuration is working properly.'\n    };\n    const info = await transporter.sendMail(mailOptions);\n    console.log('Test email sent:', info.messageId);\n    res.status(200).json({\n      message: 'Test email sent successfully',\n      messageId: info.messageId\n    });\n  } catch (error) {\n    console.error('Error sending test email:', error);\n    res.status(500).json({\n      message: 'Failed to send test email',\n      error: error.message\n    });\n  }\n});\n\n// Serve React app in production\nif (process.env.NODE_ENV === 'production') {\n  app.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, '../build', 'index.html'));\n  });\n}\napp.listen(PORT, () => {\n  console.log(`üöÄ Server running on port ${PORT}`);\n  console.log(`üìã Health check: http://localhost:${PORT}/api/health`);\n});","map":{"version":3,"names":["express","require","cors","nodemailer","path","config","app","PORT","process","env","use","json","static","join","__dirname","console","log","EMAIL_USER","EMAIL_PASS","transporter","createTransport","service","auth","user","pass","verify","error","success","post","req","res","body","name","email","message","status","mailOptions","from","replyTo","to","subject","html","replace","info","sendMail","messageId","errorMessage","code","get","emailConfigured","text","NODE_ENV","sendFile","listen"],"sources":["E:/wamp/www/portfolio/client/src/components/Contact.jsx"],"sourcesContent":["// server/server.js\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst nodemailer = require('nodemailer');\r\nconst path = require('path');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(express.static(path.join(__dirname, '../build')));\r\n\r\n// Log environment variables (but don't expose password)\r\nconsole.log('Environment check:');\r\nconsole.log('EMAIL_USER:', process.env.EMAIL_USER ? 'Set' : 'Not set');\r\nconsole.log('EMAIL_PASS:', process.env.EMAIL_PASS ? 'Set' : 'Not set');\r\nconsole.log('PORT:', PORT);\r\n\r\n// Create transporter\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: process.env.EMAIL_USER,\r\n    pass: process.env.EMAIL_PASS\r\n  }\r\n});\r\n\r\n// Verify transporter with detailed error info\r\ntransporter.verify(function(error, success) {\r\n  if (error) {\r\n    console.log('‚ùå Transporter configuration error:', error);\r\n    console.log('Troubleshooting tips:');\r\n    console.log('1. Check if EMAIL_USER and EMAIL_PASS are set in .env file');\r\n    console.log('2. Make sure you\\'re using an App Password, not your regular Gmail password');\r\n    console.log('3. Ensure 2-factor authentication is enabled on your Gmail account');\r\n    console.log('4. Check if \"Less secure app access\" is enabled if using regular password');\r\n  } else {\r\n    console.log('‚úÖ Server is ready to take messages');\r\n    console.log(`üìß Using email: ${process.env.EMAIL_USER}`);\r\n  }\r\n});\r\n\r\n// Contact route with enhanced error handling\r\napp.post('/api/contact/send', async (req, res) => {\r\n  try {\r\n    console.log('üì® Received contact form submission:', req.body);\r\n    \r\n    const { name, email, message } = req.body;\r\n\r\n    // Validate input\r\n    if (!name || !email || !message) {\r\n      console.log('‚ùå Validation failed: Missing fields');\r\n      return res.status(400).json({ message: 'All fields are required' });\r\n    }\r\n\r\n    // Email options\r\n    const mailOptions = {\r\n      from: process.env.EMAIL_USER, // Use your email as sender\r\n      replyTo: email, // Set reply-to as user's email\r\n      to: 'nizamabdulbari13@gmail.com',\r\n      subject: `New message from ${name} - Portfolio Contact Form`,\r\n      html: `\r\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n          <h2 style=\"color: #333;\">New Contact Form Submission</h2>\r\n          <div style=\"background-color: #f9f9f9; padding: 20px; border-radius: 5px;\">\r\n            <p><strong>Name:</strong> ${name}</p>\r\n            <p><strong>Email:</strong> ${email}</p>\r\n            <p><strong>Message:</strong></p>\r\n            <p style=\"background-color: #fff; padding: 15px; border-left: 4px solid #4F46E5; border-radius: 3px;\">\r\n              ${message.replace(/\\n/g, '<br>')}\r\n            </p>\r\n          </div>\r\n          <p style=\"color: #666; font-size: 12px; margin-top: 20px;\">\r\n            This message was sent from your portfolio contact form.\r\n          </p>\r\n        </div>\r\n      `\r\n    };\r\n\r\n    console.log('üì§ Attempting to send email...');\r\n    \r\n    // Send email\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log('‚úÖ Email sent successfully:', info.messageId);\r\n    \r\n    res.status(200).json({ message: 'Email sent successfully' });\r\n  } catch (error) {\r\n    console.error('‚ùå Error sending email:', error);\r\n    \r\n    // More specific error messages\r\n    let errorMessage = 'Failed to send email';\r\n    if (error.code === 'EAUTH') {\r\n      errorMessage = 'Authentication failed. Check email credentials.';\r\n    } else if (error.code === 'EENVELOPE') {\r\n      errorMessage = 'Invalid email address.';\r\n    }\r\n    \r\n    res.status(500).json({ message: errorMessage });\r\n  }\r\n});\r\n\r\n// Health check endpoint\r\napp.get('/api/health', (req, res) => {\r\n  res.json({ \r\n    status: 'OK', \r\n    message: 'Server is running',\r\n    emailConfigured: !!process.env.EMAIL_USER\r\n  });\r\n});\r\n\r\n// Test email endpoint\r\napp.post('/api/test-email', async (req, res) => {\r\n  try {\r\n    const mailOptions = {\r\n      from: process.env.EMAIL_USER,\r\n      to: 'nizamabdulbari13@gmail.com',\r\n      subject: 'Test Email from Portfolio Server',\r\n      text: 'This is a test email to verify the server email configuration is working properly.'\r\n    };\r\n\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log('Test email sent:', info.messageId);\r\n    \r\n    res.status(200).json({ \r\n      message: 'Test email sent successfully',\r\n      messageId: info.messageId\r\n    });\r\n  } catch (error) {\r\n    console.error('Error sending test email:', error);\r\n    res.status(500).json({ \r\n      message: 'Failed to send test email',\r\n      error: error.message \r\n    });\r\n  }\r\n});\r\n\r\n// Serve React app in production\r\nif (process.env.NODE_ENV === 'production') {\r\n  app.get('*', (req, res) => {\r\n    res.sendFile(path.join(__dirname, '../build', 'index.html'));\r\n  });\r\n}\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`üöÄ Server running on port ${PORT}`);\r\n  console.log(`üìã Health check: http://localhost:${PORT}/api/health`);\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}